services:
  llamara:
    image: ghcr.io/llamara-ai/llamara-backend:latest
    # image: docker.io/llamara-ai/llamara-backend-jvm # locally build image
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio_init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    ports:
      - 8080:8080
    volumes:
      - ./config:/config
    environment:
      # shared with other services in this stack
      - QUARKUS_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - QUARKUS_MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - QUARKUS_MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - QUARKUS_REDIS_CHAT_MEMORY_PASSWORD=${REDIS_PASSWORD}
      - QUARKUS_REDIS_CHAT_HISTORY_PASSWORD=${REDIS_PASSWORD}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      # additional environment variables
      - QUARKUS_OIDC_CREDENTIALS_SECRET=${QUARKUS_OIDC_CREDENTIALS_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  postgres:
    image: postgres:latest
    hostname: postgres
    # ports:
    #   - 5432:5432
    volumes:
      - ./postgres/pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_USER=llamara
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=llamara
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U llamara -d llamara" ]
      interval: 1s
      timeout: 5s
      retries: 10

  minio:
    image: minio/minio:latest
    hostname: minio
    command: server /data --console-address ":9001"
    ports:
    #   - 9000:9000 # MinIO server
     - 9001:9001 # MinIO console
    volumes:
      - ./minio/data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=llamara
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  minio_init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minio ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc admin accesskey create myminio --access-key ${MINIO_ACCESS_KEY} --secret-key ${MINIO_SECRET_KEY};
      exit 0;
      "

  redis:
    image: redis:latest
    hostname: redis
    command: redis-server --save 60 1 --loglevel notice --requirepass ${REDIS_PASSWORD}
    # ports:
    #   - 6379:6379
    volumes:
      - ./redis/redis-data:/var/lib/redis
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 5s
      retries: 10

  qdrant:
    image: qdrant/qdrant:latest
    hostname: qdrant
    ports:
      - 6333:6333 # REST API & web interface
    #  - 6334:6334 # gRPC API
    volumes:
      - ./qdrant/qdrant_storage:/qdrant/storage:z
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}
